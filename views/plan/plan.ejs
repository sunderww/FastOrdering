<body class="dashboard-page sb-l-o sb-r-c">


<script src = "/res/SimpleDiskParticle.js"></script>
<script src = "/res/SimpleSquareParticle.js"></script>
<script src = "/assets/js/jquery-1.11.2.js"></script>
<script src="/res/Bootstrap/js/bootstrap.min.js"></script>
<!-- Start: Main -->
<div id="main">

        <% include ../header.ejs %>
        <% include ../sidebar.ejs %>

                <section id="content_wrapper">

                    <header id="topbar">
                        <div class="topbar-left">
                            <ol class="breadcrumb">
                                <li class="crumb-active">
                                    <a href="dashboard">Plan de Table</a>
                                </li>
                                <li class="crumb-icon">
                                    <a href="dashboard">
                                        <span class="glyphicon glyphicon-home"></span>
                                    </a>
                                </li>
                                <li class="crumb-link">
                                    <a href="dashboard">Accueil</a>
                                </li>
                                <li class="crumb-trail">Plan de Table</li>
                            </ol>
                        </div>
                    
                    </header>
                    <!-- End: Topbar -->

                    <!-- Begin: Content -->
                    <section id="content" class="animated fadeIn">

                        <script type="text/javascript">
                            window.addEventListener("load", windowLoadHandler, false);

                            //For debug messages
                            var Debugger = function() { };
                            var result;
                            var iteration;
                            var save_reference;
                            var erase_reference;
                            var id_reference;

                            Debugger.log = function(message) {
                                try {
                                    console.log(message);
                                }
                                catch (exception) {
                                    return;
                                }
                            }

                            function windowLoadHandler() {
                                result = [];
                                iteration = 0;
                                canvasApp();
                            }

                            /*function canvasSupport() {
                                return Modernizr.canvas;
                            }*/


                            window.onload = function(type){ 

                                function add_board_select() {
                                    var element = document.createElement("button");
                                    element.type = type;
                                    element.innerHTML = "Titre";
                                    element.name = "same_test";
                                    element.id = "board_" + (iteration);
                                    element.className = "board_select";

                                    element.onclick = function() {
                                        alert("switch to " + element.innerHTML);
                                        erase_reference();
                                        var resultLength = result.length;
                                        for (var i = 0; i < resultLength; i++) {
                                            if (result[i].title.localeCompare(element.innerHTML) == 0) {
                                                canvasApp(result[i]);
                                            }
                                        }
                                    };

                                    var foo = document.getElementById("board_list"); 
                                    foo.appendChild(element); 
                                }

                                function update_buttons(type) {
                                    add_board_select(type);
                                    var resultLength = result.length;
                                    for (var i = 0; i < resultLength; i++) {
                                        document.getElementById("board_" + (i)).innerHTML = result[i].title;
                                    }
                                }

                                function new_board() {
                                    if (save_reference() == -1) {
                                        return ;
                                    };
                                    //console.log(canvasApp.current_id);
                                    console.log(iteration);
                                    update_buttons("lolo");
                                    console.log( result[iteration - 1].title);
                                    //document.getElementById('board_0').innerHTML = result[iteration - 1].title;
                                    erase_reference();
                                    canvasApp();
                                }

                                document.getElementById('new_board').onclick = function() {
                                    new_board();
                                }
                            };


                            function canvasApp(saved_instance) {
                                
                                var theCanvas = document.getElementById("canvasOne");
                                var context = theCanvas.getContext("2d");
                                var current_id = iteration;
                                
                                init(saved_instance);
                                
                                var currentShape;

                                var stepX;
                                var stepY;

                                var createdShape;
                                var numShapes;
                                var shapes;

                                var dragIndex;
                                var dragging;
                                var mouseX;
                                var mouseY;
                                var dragHoldX;
                                var dragHoldY;
                                var timer;
                                var targetX;
                                var targetY;
                                var easeAmount;  

                                function init(saved_instance) {

                                    document.getElementById('current_title').value = "Titre";

                                    save_reference = save_board;
                                    erase_reference = erase_all;
                                    id_reference = current_id;
                                    iteration++;

                                    numShapes = 5;
                                    easeAmount = 0.7;
                                    stepX = 12;
                                    stepY = 12;
                                    createdShapes = numShapes;

                                    shapes = [];
                                    
                                    if (saved_instance !== undefined) {
                                        numShapes = 0;
                                        makeShapes();

                                        stepX = saved_instance.stepX;
                                        stepY = saved_instance.stepY;
                                        numShapes = saved_instance.numShapes;
                                        shapes = saved_instance.position;
                                        createdShapes = numShapes;
                                        
                                    } else {
                                      makeShapes();
                                    }
                                    
                                    drawScreen();
                                    
                                    theCanvas.addEventListener("mousedown", mouseDownListener, false);
                                    theCanvas.addEventListener("dblclick", onClickListener, false);
                                }
                                
                                function makeShapes() {
                                    var tempX;
                                    var tempY;
                                    var tempA;
                                    var tempColor;
                                    for (i=0; i < numShapes; i++) {

                                        tempX = theCanvas.width / stepX;
                                        tempY = theCanvas.height / stepY;
                                        
                                        tempA = 0.3 + 0.5*Math.random();

                                        //randomly select either a circle or a square
                                        tempShape = new SimpleSquareParticle(tempX, tempY, i);
                                        
                                        tempShape.color = "rgba(" + 0 + "," + 0+ "," + 0 + "," + 0.7+ ")";
                                        tempShape.radiusX = (theCanvas.width / stepX) / 2;
                                        tempShape.radiusY = (theCanvas.height / stepY) / 2;
                                        shapes.push(tempShape);
                                    }
                                }
                                

                                function mouseDownListener(evt) {
                                    var i;
                                    
                                    var bRect = theCanvas.getBoundingClientRect();
                                    mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
                                    mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
                                    console.log(shapes);

                                    for (i=0; i < numShapes; i++) {
                                        if (shapes[i].hitTest(mouseX, mouseY)) {    
                                            dragging = true;
                                            dragIndex = i;
                                        }
                                    }
                                    
                                    if (dragging) {
                                        window.addEventListener("mousemove", mouseMoveListener, false);
                                        
                                        //place currently dragged shape on top
                                        shapes.push(shapes.splice(dragIndex,1)[0]);
                                        
                                        dragHoldX = mouseX - shapes[numShapes-1].x;
                                        dragHoldY = mouseY - shapes[numShapes-1].y;
                                        
                                        targetX = mouseX - dragHoldX;
                                        targetY = mouseY - dragHoldY;
                                        console.log("toto");
                                        //start timer
                                        timer = setInterval(onTimerTick, 1000/30);
                                    }
                                    window.removeEventListener("mousemove", mouseMoveListener, false);
                                    theCanvas.removeEventListener("mousedown", mouseDownListener, false);
                                    window.addEventListener("mouseup", mouseUpListener, false);
                                    
                                    if (evt.preventDefault) {
                                        evt.preventDefault();
                                    }
                                    else if (evt.returnValue) {
                                        evt.returnValue = false;
                                    }
                                    return false;
                                }
                                
                                function onTimerTick() {
                                    shapes[numShapes - 1].x = shapes[numShapes-1].x + easeAmount*(targetX - shapes[numShapes- 1].x);
                                    shapes[numShapes - 1].y = shapes[numShapes-1].y + easeAmount*(targetY - shapes[numShapes- 1].y);
                                    if ((!dragging)&&(Math.abs(shapes[numShapes-1].x - targetX) < 0.1) && (Math.abs(shapes[numShapes-1].y - targetY) < 0.1)) {
                                        shapes[numShapes-1].x = targetX;
                                        shapes[numShapes-1].y = targetY;
                                        clearInterval(timer);
                                    }
                                    drawScreen();
                                }

                                function closest (target, size, step_tmp) {
                                            var step_length = size / step_tmp;
                                            var arr = new Array();

                                            var it = 0;
                                            for (i = 0; i < size;i += step_length) {
                                                arr[it] = i;
                                                it++;
                                            }

                                            var curr = arr[0];

                                            //console.log(arr);
                                            var diff = Math.abs (target - curr);
                                            for (var val = 0; val < arr.length; val++) {
                                                var newdiff = Math.abs (target - arr[val]);
                                                if (newdiff < diff) {
                                                    diff = newdiff;
                                                    curr = arr[val];
                                                }
                                            }
                                            //console.log(curr);
                                            return curr;
                                }
                                
                                function onClickListener(evt) {
                                    var i;
                                    
                                    var bRect = theCanvas.getBoundingClientRect();
                                    mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
                                    mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
                                            
                                    for (i=0; i < numShapes; i++) {
                                        if (shapes[i].hitTest(mouseX, mouseY)) {    
                                            make_info(shapes[i]);
                                        }
                                    }
                                }

                                function make_info(table) {
                                    currentShape = table;
                                    document.getElementById('myModalLabel').innerHTML = "Table n°" + currentShape.number;
                                    document.getElementById('myModalTNumber').innerHTML = "Modifier numéro de table";
                                    document.getElementsByName('queryN')[0].placeholder = currentShape.number;
                                    document.getElementById('myModalTServer').innerHTML = "Modifier serveur affécté à la table";
                                    document.getElementsByName('queryS')[0].placeholder = currentShape.server;
                                    $('#myModal').modal('show');
                                }


                                function mouseUpListener(evt) {
                                    theCanvas.addEventListener("mousedown", mouseDownListener, false);
                                    window.removeEventListener("mouseup", mouseUpListener, false);
                                    if (dragging) {
                                        dragging = false;
                                        window.removeEventListener("mousemove", mouseMoveListener, false);
                                        targetX = closest(targetX - (theCanvas.width / stepX / 2), theCanvas.width, stepX) + (theCanvas.width / stepX / 2);
                                        targetY = closest(targetY - (theCanvas.height / stepY / 2), theCanvas.height, stepY) + (theCanvas.width / stepX / 2);
                                    }
                                }

                                function mouseMoveListener(evt) {
                                    var posX;
                                    var posY;
                                    var shapeRadX = shapes[numShapes-1].radiusX;
                                    var shapeRadY = shapes[numShapes-1].radiusY;
                                    var minX = shapeRadX;
                                    var maxX = theCanvas.width - shapeRadX;
                                    var minY = shapeRadY;
                                    var maxY = theCanvas.height - shapeRadY;
                                    
                                    var bRect = theCanvas.getBoundingClientRect();
                                    mouseX = (evt.clientX - bRect.left)*(theCanvas.width/bRect.width);
                                    mouseY = (evt.clientY - bRect.top)*(theCanvas.height/bRect.height);
                                    posX = mouseX - dragHoldX;
                                    posX = (posX < minX) ? minX : ((posX > maxX) ? maxX : posX);
                                    posY = mouseY - dragHoldY;
                                    posY = (posY < minY) ? minY : ((posY > maxY) ? maxY : posY);
                                    
                                    targetX = posX;
                                    targetY = posY;
                                }
                                    
                                function drawShapes() {
                                    var i;
                                    for (i=0; i < numShapes; i++) {
                                        shapes[i].drawToContext(context);
                                    }
                                }

                                //Button Bindings
                                
                                function add_table() {
                                        tempX = theCanvas.width / stepX;
                                        tempY = theCanvas.height / stepY;
                                        //console.log(shapes);
                                        tempA = 0.7;

                                        tempShape = new SimpleSquareParticle(tempX, tempY, createdShapes);
                                        
                                        tempShape.color = "rgba(" + 0 + "," + 0+ "," + 0 + "," + tempA + ")";
                                        tempShape.radiusX = (theCanvas.width / stepX) / 2;
                                        tempShape.radiusY = (theCanvas.height / stepY) / 2;
                                        shapes.push(tempShape);
                                        numShapes++;
                                        createdShapes++;
                                        tempShape.drawToContext(context);
                                        console.log(document.getElementById('current_title').value);
                                }

                                document.getElementById('add_table').onclick = function() {
                                    add_table();
                                }

                                function add_rowx() {

                                    var tmpx = theCanvas.width / stepX;
                                    theCanvas.width += tmpx;
                                    stepX++;

                                    drawScreen();
                                }

                                document.getElementById('add_rowx').onclick = function() {
                                    add_rowx();
                                }

                                function add_rowy() {

                                    var tmpy = theCanvas.height / stepY;
                                    theCanvas.height += tmpy;
                                    stepY++;

                                    drawScreen();
                                }

                                document.getElementById('add_rowy').onclick = function() {
                                    add_rowy();
                                }

                                function save_board() {
                                    var title = document.getElementById('current_title').value;
                                    var prepare = {"title":title, "dimX":stepX, "dimY":stepY, "numShapes":numShapes, "position":shapes };

                                    var resultLength = result.length;
                                    for (var i = 0; i < resultLength; i++) {
                                        if (result[i].title.localeCompare(title) == 0) {
                                            alert("Le titre a sauvegarder existe déja.");
                                            return -1;
                                        }
                                    }
                                    result[current_id] = prepare;
                                    console.log(result);
                                    console.log(title);
                                }


                                document.getElementById('save_board').onclick = function() {
                                    save_board();
                                }

                                // Table menu buttons

                                function erase_table() {
                                    var index = shapes.indexOf(currentShape);
                                    shapes[index].color = "rgba(255, 255, 255, 1)";
                                    shapes[index].drawToContext(context);
                                    shapes.splice(index, 1);
                                    numShapes--;
                                }

                                document.getElementById('erase_table').onclick = function() {
                                    erase_table();
                                }

                                function submitTNumForm() {
                                    currentShape.number = document.getElementsByName('queryN')[0].value;
                                    document.getElementsByName('queryN')[0].value = "";
                                    $('#myModal').modal('toggle');
                                    make_info(currentShape);
                                }

                                document.getElementById('sub_num').onclick = function() {
                                    submitTNumForm();
                                }

                                function submitServForm() {
                                    console.log(document.getElementsByName('queryS')[0].value);
                                    currentShape.server = document.getElementsByName('queryS')[0].value;
                                    document.getElementsByName('queryS')[0].value = "";
                                    $('#myModal').modal('toggle');
                                    make_info(currentShape);
                                }

                                document.getElementById('sub_serv').onclick = function() {
                                    submitServForm();
                                }

                                function erase_table() {
                                    var index = shapes.indexOf(currentShape);
                                    shapes[index].color = "rgba(255, 255, 255, 1)";
                                    shapes[index].drawToContext(context);
                                    shapes.splice(index, 1);
                                    numShapes--;
                                }

                                //Draw

                                function drawScreen() {
                                    //bg
                                    context.fillStyle = "#ffffff";
                                    context.fillRect(0,0,theCanvas.width,theCanvas.height);
                                    //console.log("you even draw");
                                    var x = theCanvas.width / stepX;
                                    var y = theCanvas.height / stepY;
                                    for (i = 0;i < stepX; i++) {
                                        for (j = 0;j < stepY; j++) {
                                            context.strokeRect(i * x,j * y,i*x + x,j *y + y);
                                        }
                                    }
                                    
                                    
                                    drawShapes();       
                                }

                                function erase_all() {
                                    theCanvas.removeEventListener("dblclick", onClickListener, false);
                                    //theCanvas.removeEventListener("mouseup", mouseDownListener, false);
                                    theCanvas.removeEventListener("mousedown", mouseDownListener, false);
                                    window.removeEventListener("mousemove", mouseMoveListener, false);
                                    clearInterval(timer);
                                    //shapes = [];
                                    context.clearRect(0, 0, theCanvas.width, theCanvas.height);
                                }

                                $("#myformNum").submit(function(e) {
                                e.preventDefault();
                                });

                                $("#myformServ").submit(function(e) {
                                e.preventDefault();
                                });
                            }

                        </script>

                        <body>

                            <div style="top: 50px; text-align:0center">
                            <h2>
                                <input id="current_title" class="form-field" type="text" name="firstname" placeholder="Titre"/>
                                <div id="board_selector"><div id="board_list"><button id="board_0" class="board_select">Titre</button></div><button id="new_board" class="board_select" onClick="new_board()">+</button></div>
                            </h2>
                            <canvas id="canvasOne" width="600" height="600" style="border:1px solid black">
                            Your browser does not support HTML5 canvas.
                            </canvas>
                                <div>
                                <button id="add_table" onclick="add_table()">Ajouter Table</button>
                                <button id="add_rowy" class="managing_board_btn" onclick="add_clmn()">Ajouter Colonne </button>
                                <button id="add_rowx" class="managing_board_btn" onclick="add_row()">Ajouter ligne</button>
                                <button id="rm_rowy" class="managing_board_btn" onclick="rm_clmn()">Supprimer Colonne</button>
                                <button id="rm_rowX" class="managing_board_btn" onclick="rm_row()">Supprimer ligne</button>
                                <button id="save_board" onclick="save_board()">Sauvegarder plan de salle</button>
                            </div>
                            </div>

                        </body>
                </section>
            </section>
    </div>

</body>
<div id="modal_placeholder">
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false" style="top:15%">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="false">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Caractéristiques de Table</h4>
          </div>
          <div class="modal-body" id="mod-body">
            <p id="myModalTNumber"></p>
            <form id="myformNum">
                <input type='text' name='queryN' placeholder="">
                <button type="button" id="sub_num" onclick="submitTNumForm()">Confirmer</button>
                <!-- <a href="javascript: submitTNumForm()">Submit</a> -->
            </form></br>
            <p id="myModalTServer"></p>
            <form id="myformServ">
                <input type='text' name='queryS' placeholder="">
                <button type="button" id="sub_serv" onclick="submitServForm()">Confirmer</button>
                <!-- <a href="javascript: submitServForm()">Submit</a> -->
            </form></br>
            </br>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Fermer</button>
            <button type="button" class="btn btn-primary" id="erase_table" data-dismiss="modal" onclick="erase_table()">Effacer Table</button>
          </div>
        </div>
      </div>
    </div>
</div>